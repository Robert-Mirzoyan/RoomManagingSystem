networks:
  appnet:
    driver: bridge

services:
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=7d
    ports:
      - "9090:9090"
    depends_on:
      - room-service
      - user-service
      - discovery-server
      - api-gateway
    networks: [ appnet ]

  grafana:
    image: grafana/grafana:10.4.3
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks: [ appnet ]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks: [appnet]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on: [ elasticsearch ]
    networks: [appnet]

  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.3
    container_name: logstash
    volumes:
      - /Users/rmirzoyan/IdeaProjects/RoomManagingSystem/elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5001:5001"
    depends_on: [ elasticsearch ]
    networks: [appnet]

  discovery-server:
    build: ./discovery-server
    container_name: discovery_server
    ports:
      - "8761:8761"
    networks: [appnet]

  db:
    image: postgres:15
    container_name: my_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: rob
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: mydb
    volumes:
      - /Users/rmirzoyan/IdeaProjects/RoomManagingSystem/src/main/resources/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    networks: [appnet]

  user-service:
    build: ./userForSubmoduleIntegrationTask
    container_name: user_service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/mydb
      SPRING_DATASOURCE_USERNAME: rob
      SPRING_DATASOURCE_PASSWORD: 12345678
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
      EUREKA_INSTANCE_NON_SECURE_PORT: 8081
    depends_on: [db, discovery-server]
    networks: [appnet]

  room-service:
    build: ./RoomManagingSystem
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/mydb
      SPRING_DATASOURCE_USERNAME: rob
      SPRING_DATASOURCE_PASSWORD: 12345678
      USER_SERVICE_URL: http://user-service:8081
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
      EUREKA_INSTANCE_NON_SECURE_PORT: 8080
    depends_on: [db, discovery-server, user-service]
    networks: [appnet]

  api-gateway:
    build: ./ApiGatewayApplication
    container_name: api_gateway
    ports:
      - "9000:9000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    depends_on:
      - discovery-server
    networks: [ appnet ]